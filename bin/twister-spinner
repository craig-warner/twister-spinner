#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""
Twister Spinner
author: Craig Warner
    This program spins the twister spinner for you, so you can play
Twister with just two people.
"""

# External Imports
import os
import platform
import sys
import argparse
import hjson
import time
import random 

# import required module
from pydub import AudioSegment
from pydub.playback import play

from enum import IntEnum

# GUI  Imports
from PyQt5 import (QtWidgets, QtCore)
from PyQt5.QtWidgets import (
    QMainWindow, QApplication,
    QLabel, QCheckBox, QComboBox, QListWidget, QListWidgetItem, QLineEdit,
    QLineEdit, QSpinBox, QDoubleSpinBox, QSlider,
    QHBoxLayout, QVBoxLayout, QToolBar, QAction, QStatusBar,
    QDialog, QDialogButtonBox, QFileDialog, QWidget, QProgressBar
)
from PyQt5.QtCore import ( 
    Qt, QRect, QObject, QThread, pyqtSignal,QTimer
)
from PyQt5.QtGui import ( 
    QPainter, QColor, QFont, QPixmap, QPen,QBrush
)

# TwisterSpinner Imports  
from version import __version__

class Mode(IntEnum):
    Banner = 1
    Play = 2



# Worker class for calculating an image
class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def Setup(self,sound):
        self.sound = sound

    def run(self):
        """ Play Sound """
        play(self.sound)
        self.finished.emit()

class CanvasWidget(QWidget):
    def __init__(self,parent,width,height):
        super(CanvasWidget, self).__init__(parent)
        if args.verbose:
            print("Canvas Widget")
        self.setGeometry(QRect(0, 0, width, height))
        self.parent = parent

        self.label = QLabel()
        self.cvs = QPixmap(width, height)
        self.cvs.fill(Qt.black)
        self.label.setPixmap(self.cvs)

        self.drawDot = False
        self.dot_x = 0
        self.dot_y = 0
        self.dot_radius = 0

        self.partImages = []
        parts = ['left_foot','left_hand','right_foot','right_hand']
        if args.verbose:
            print("Loading Images...")
        for pname in parts:
            imgFileName = topPath+"/images/parts/white_"+pname+".png"
            self.partImages.append(QPixmap(imgFileName))
        # Spinner Images
        self.spinnerImages = []
        for si in range (0,48):
            imgFileName = "%s/images/spinner/spinner_3d00%02d.png" % (topPath,si)
            self.spinnerImages.append(QPixmap(imgFileName))
        # Banner Image
        imgFileName = topPath+"/images/banner/touchtostart.png"
        self.bannerImage = QPixmap(imgFileName)

    def paintEvent(self, e):
        #print("Paint")
        qp = QPainter()
        qp.begin(self)
        qp.drawPixmap(0,0,self.cvs)
        qp.end()

    def mousePressEvent(self,event):
        self.point_set_x = event.pos().x()
        self.point_set_y = event.pos().y()
        if(args.verbose):
            print("x: %d y: %d " % (self.point_seta,self.point_set_y))
        self.repaint()
        #self.update()

    def DrawDotCanvas(self,x,y,radius,color):
        self.drawDot = True
        self.dot_x = x 
        self.dot_y = y 
        self.dot_radius = radius 
        self.dot_color = color 
        qp_pm = QPainter(self.cvs)
        #colors= ['blue','green','red','yellow']
        if(color == 0):
            qp_pm.setPen(QPen(Qt.blue, 5))
            qp_pm.setBrush(QBrush(Qt.blue, Qt.SolidPattern))
        elif(color == 1):
            qp_pm.setPen(QPen(Qt.green, 5))
            qp_pm.setBrush(QBrush(Qt.green, Qt.SolidPattern))
        elif(color == 2):
            qp_pm.setPen(QPen(Qt.red, 5))
            qp_pm.setBrush(QBrush(Qt.red, Qt.SolidPattern))
        elif(color == 3):
            qp_pm.setPen(QPen(Qt.yellow, 5))
            qp_pm.setBrush(QBrush(Qt.yellow, Qt.SolidPattern))
        qp_pm.drawEllipse(self.dot_x,self.dot_y,self.dot_radius//2, self.dot_radius//2)
        #print("Draw Ellipse:",self.dot_x,":",self.dot_radius)
        qp_pm.end()
        self.repaint()

    def DrawBannerCanvas(self,x,y):
        qp_pm = QPainter(self.cvs)
        qp_pm.drawPixmap(x,y,self.bannerImage)
        qp_pm.end()
        self.repaint()

    def DrawPartCanvas(self,image_num,x,y,w,h):
        qp_pm = QPainter(self.cvs)
        qp_pm.drawPixmap(x,y,w,h,self.partImages[image_num])
        qp_pm.end()
        self.repaint()
        
    def DrawSpinnerCanvas(self,image_num,x,y):
        qp_pm = QPainter(self.cvs)
        qp_pm.drawPixmap(x,y,self.spinnerImages[image_num])
        qp_pm.end()
        self.repaint()

    def ClearCanvas(self):
        self.cvs.fill(Qt.black)

class AboutDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Twister Spinner")

        QBtn = QDialogButtonBox.Ok 

        self.buttonBox = QDialogButtonBox(QBtn)
        self.buttonBox.accepted.connect(self.accept)

        self.layout = QVBoxLayout()

        message_str = "Twister Spinner\nVersion: %s\n" % (__version__)
        message_str = message_str + "Copyright 2023 Craig Warner all rights reserved."
        message = QLabel(message_str)
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)

class SettingDialog(QDialog):
    def __init__(self,win_text,msg_text):
        super().__init__()

        self.setWindowTitle(win_text)

        QBtn = QDialogButtonBox.Ok 

        self.buttonBox = QDialogButtonBox(QBtn)
        self.buttonBox.accepted.connect(self.accept)

        self.layout = QVBoxLayout()
        message = QLabel(msg_text)
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)

class MainWindow(QMainWindow):

    def __init__(self,topPath,width,height):
        super(MainWindow, self).__init__()

        self.screenWidth = width
        self.screenHeight= height 
        # Interval Timer Tick
        self.iTick = 0
        # Other variables
        self.iPass = True
        self.bShowIntro = True,
        self.canvasWidth = self.screenWidth -100  
        self.canvasHeight = self.screenHeight -100 
        # Spinner Settings
        self.minTicksBetweenSpins = 0
        self.maxTicksBetweenSpins = 100
        self.spinSeq = 0,
        # Provocations
        self.enableProvocations = False
        self.provocationFrequency = 25 
        # Part Type 4 is Spinner
        self.partTypeWidth = [250, 250, 300, 300, 350]
        self.partTypeHeight = [300, 300, 400, 400, 250]
        self.smallParts = False
        # This Spin
        self.displayedBodyPart = False
        self.curPart = 0
        self.curSide = 0
        self.curPartType = 0
        self.curColor = 0
        #// Delay for this Spin
        self.curTicksOfDelay = 0
        # Provoke this Spin
        self.curProvocation = True
        # Intro
        self.bShowIntro = True
       # Spinner Frames
        self.displayedTouchToStart = False
        self.displayedSpinnerFrame = -1
       # Dots
        self.numDots = 0
       # Sounds
        self.soundOn = True,

        # Init Images
        #self.loadImages(topPath)
        # Init Sounds
        self.loadSounds(topPath)
        # Initialize Spinner Wiggle
        self.initArt()
        # Start the GUI 
        self.initUI()
        self.initBanner()
        self.initTick()

    # FIXME:Remove
    def loadImages(self,topPath):
        self.partImages = []
        parts = ['left_foot','left_hand','right_foot','right_hand']
        if args.verbose:
            print("Loading Images...")
        for pname in parts:
            imgFileName = topPath+"/images/parts/white_"+pname+".png"
            self.partImages.append(QPixmap(imgFileName))
        # Spinner Images
        self.spinnerImages = []
        for si in range (0,48):
            imgFileName = "%s/images/spinner/spinner_3d00%02d.png" % (topPath,si)
            self.spinnerImages.append(QPixmap(imgFileName))
        # Banner Images
        self.bannerImages = []
        imgFileName = topPath+"/images/banner/touchtostart.png"
        self.bannerImages.append(QPixmap(imgFileName))

    def loadSounds(self,topPath):
        # side sounds
        if args.verbose:
            print("Loading Sounds...")
        sides = ['left','right']
        self.sideSounds = []
        for ss in sides:
            audioFileName = topPath+"/audio/"+ss+"f.mp3"
            #print("DEBUG:",audioFileName)
            self.sideSounds.append(AudioSegment.from_mp3(audioFileName))
        # part sounds
        parts= ['hand','foot']
        self.partSounds = []
        for ps in parts:
            audioFileName = topPath+"/audio/"+ps+"f.mp3"
            self.partSounds.append(AudioSegment.from_mp3(audioFileName))
        # part sounds
        self.colorSounds= []
        colors= ['blue','green','red','yellow']
        for cs in colors:
            audioFileName = topPath+"/audio/"+cs+"f.mp3"
            self.colorSounds.append(AudioSegment.from_mp3(audioFileName))
        # provocations sounds
        self.provocationSounds= []
        provs = ['ButtsOffTheMat','Cheating','Fart','HoldOnNow','HoldPositionWhile',"KeepYour",'OneSecondILost']
        for ps in provs:
            audioFileName = topPath+"/audio/provocations/"+ps+".mp3"
            self.provocationSounds.append(AudioSegment.from_mp3(audioFileName))

    def initUI(self):
        self.wid = QtWidgets.QWidget(self)
        self.setCentralWidget(self.wid)
        self.setGeometry(0,0,self.canvasWidth,self.canvasHeight) 
        self.setFixedSize(self.canvasWidth,self.canvasHeight)
        self.setWindowTitle("Twister Spinner")
        self.createActions()
        self.addMenuToWindow()
        self.addBody()
        self.show()

    def createActions(self):
        self.playAction= QAction()
        self.playAction.setText("Play")
        self.settingsAction= QAction()
        self.settingsAction.setText("Settings")
        self.exitAppAction= QAction()
        self.exitAppAction.setText("Quit")

        self.aboutAction= QAction()
        self.aboutAction.setText("About")

    def addMenuToWindow(self):

        menu = self.menuBar()
        file_menu = menu.addMenu("&File")
        file_menu.addAction(self.playAction)
        file_menu.addAction(self.settingsAction)
        file_menu.addSeparator()
        file_menu.addAction(self.exitAppAction)

        help_menu = menu.addMenu("&Help")
        help_menu.addAction(self.aboutAction)

        self.playAction.triggered.connect(self.doPlay)
        self.settingsAction.triggered.connect(self.doSettings)
        self.exitAppAction.triggered.connect(self.doExitApp)
        self.aboutAction.triggered.connect(self.doAbout)

    def doPlay(self):
        global template
        self.mode = Mode.Play
        self.iTick = 0
        if(args.verbose):
            print("Play")
        play(self.partSounds[0])

    def doSettings(self):
        if(args.verbose):
            print("Settings")

    def doExitApp(self):
        if(args.verbose):
            print("Exit")
        exit(0)

    def doAbout(self):
        if(args.verbose):
           print("About")
        dlg = AboutDialog(self)
        dlg.exec()

    def addBody(self):
        vbox1 = QtWidgets.QVBoxLayout()
        self.canvas = CanvasWidget(self,self.canvasWidth, self.canvasHeight)
        vbox1.addWidget(self.canvas)
        self.wid.setLayout(vbox1)

    def initBanner(self):
        self.mode = Mode.Banner
        self.spinSeq = 0
        # Draw Banner
        self.DrawTouchScreenToStart()
        # Draw Spinner and Dots

    def DrawTouchScreenToStart(self):
        # Draw Banner
        ul_x = (self.canvasWidth//2) - (271 // 2)
        ul_y = (self.canvasHeight//2) - (234 // 2)
        self.canvas.DrawBannerCanvas(ul_x,ul_y);

    def initTick(self):
        # timer which repate function `display_time` every 1000ms (1s)
        self.iTick = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self.DoTick)  # execute `display_time`
#        self.timer.setInterval(1000)  # 1000ms = 1s
        self.timer.setInterval(100)  # 1000ms = 1s
        self.timer.start()


    def playSoundWithThread(self,part,partNum,side,sideNum,color,colorNum,provocation,provocationNum):
        # Create a QThread object
        self.thread = QThread()
        # Create a worker object
        self.worker = Worker()
        # Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Pass Arguments to Worker
        if(part):
            self.worker.Setup(self.partSound[partNum])
        elif(side):
            self.worker.Setup(self.sideSound[sideNum])
        elif(color):
            self.worker.Setup(self.colorSound[colorNum])
        elif(provocation):
            self.worker.Setup(self.colorSound[provocationNum])
        else:
            print("Error: Boad Sound")
            exit(1)
        # Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        # Start the thread
        self.thread.start()
        if args.verbose:
            print("Thread Started")

    def initArt(self):
        self.wiggleSpinner = [0, 47, 46, 45, 44, 43, 42, 41, 40, 40, 41, 42, 43, 44, 45, 46, 47, 0, 1, 2, 3, 4, 5, 6, 7, 8,\
            8, 7, 6, 5, 4, 3, 2, 1, 47, 46, 45, 44, 43, 42, 41, 40, 41, 42, 43, 44, 45, 46, 47, 0]
        self.curColorRGB = ["rgb(248,9,43)", "rgb(9,19,248)", "rgb(14,248,9)", "rgb(228,248,9)"]

    def ClearCanvas(self):
        if args.verbose:
            print("Clear Canvas")
        self.canvas.ClearCanvas()

    def CalcSpinnerFrame(self):
        modTick = (self.iTick % 48)
        if (self.iTick == 0):
            self.spinSeq = 0
            return (0)
        elif modTick == 0:
            self.spinSeq = random.randrange(0,4)
            return (0)
        elif (self.spinSeq == 0):
            # Still
            return (0)
        elif (self.spinSeq == 1):
            # Spin 
            return (modTick)
        elif (self.spinSeq == 2):
            # Reverse Spin 
            return (47 - modTick)
        elif (self.spinSeq == 3):
            # x3 Spin 
            return (((modTick * 3) % 48))
        elif (self.spinSeq == 4): 
            return (self.wiggleSpinner[modTick])

    def CalcLeftForMiddle(self,inWidth):
        return((self.canvasWidth//2) - (inWidth//2))

    def CalcTopForMiddle(self,inHeight):
        return ((self.canvasHeight // 2) - (inHeight//2))

#    def paintEvent(self, event):    
#        print("Paint Event")
        #qp = QPainter()
        #qp = QPainter(self.label.pixmap())
        #qp = QPainter(self.label.pixmap())
        #qp.begin(self)
        #ix = self.iTick +20
        #iy = 40 
        #iradius = 20 
        #qp.setPen(QPen(Qt.blue, 5))
        #qp.drawEllipse(ix,iy, iradius//2, iradius//2)
#        qp = QPainter(self.label.pixmap())
        #ul_x = (self.canvasWidth//2) - (347 // 2)
        #ul_y = (self.canvasHeight//2) - (111 // 2)
        #print("Spinner Frame:",self.spinnerFrame,ul_x,ul_y)

#        qp.begin(self)
#        qp.drawPixmap(ul_x,ul_y,self.spinnerImages[self.spinnerFrame])
        #self.label.setPixmap(self.canvas)
        #self.label.drawPixmap(ul_x,ul_y,self.spinnerImages[2])
#        qp.end()


    def DrawSpinnerFrame(self,frame):
        self.spinnerFrame = frame
        ul_x = (self.canvasWidth//2) - (347 // 2)
        ul_y = (self.canvasHeight//2) - (111 // 2)
        self.canvas.DrawSpinnerCanvas(frame,ul_x,ul_y)

    def DrawColor (self,inColor,inPartType):
        rndRadius = self.RandRadius()
        self.PutCircle(rndRadius,inColor,inPartType)

    def PutCircle(self,inRadius,inColor,inPartType):
        offScreen = True
        offScreen = True
        while((offScreen == True) or (overlap == True)):
            rndX = self.RandX()
            rndY = self.RandY()
            offScreen = self.IsOffScreen(rndX,rndY,inRadius,inPartType)
            overlap = self.IsOverlappingPart(rndX,rndY,inRadius,inPartType)
        # Found a Spot
        self.DrawCircle(rndX,rndY,inRadius,inColor)

    def RandX(self):
        return(random.randrange(0,self.canvasWidth))

    def RandY(self):
        return(random.randrange(0,self.canvasHeight))

    def RandRadius(self):
        if(self.smallParts == True):
            return(random.randrange(0,25))
        else: 
            return(random.randrange(0,50))
            
    def IsOffScreen(self,ix,iy,iradius,inPartType):
        return(False); 

    def IsOverlappingPart(self,ix,iy,iradius,inPartType):
        overlap = False
        # Check X
        if self.smallParts:
            partWidth = self.partTypeWidth[inPartType] // 2 
            partHeight = self.partTypeHeight[inPartType] // 2
        else:
            partWidth = self.partTypeWidth[inPartType]
            partHeight = self.partTypeHeight[inPartType]
        if ((ix + iradius) > self.CalcLeftForMiddle(partWidth) and \
           ((ix - iradius) < (self.CalcLeftForMiddle(partWidth) + partWidth))): 
            if(((iy + iradius) > self.CalcTopForMiddle(partHeight)) and \
                ((iy - iradius) < (self.CalcTopForMiddle(partHeight) + partHeight))): 
                overlap = True
        return(overlap)

    def DrawCircle(self,ix,iy,iradius,icolor):
    #    print("Draw Circle")
        self.canvas.DrawDotCanvas(ix,iy,iradius,icolor)
    # 
    # Spin Functions
    # 
    def SelectSidePartColor(self):
        # pick a side
        self.curSide = random.randrange(0,2)
        # pick a part
        self.curPart = random.randrange(0,2)
        # pick a color
        self.curColor = random.randrane(0,4)
        # Calc Part Type 
        self.curPartType = self.curPart*2 + self.curSide

    def SelectDelay(self):
        # pick a delay
        rnd = random.randrange(self.minTicksBetweenSpins,self.maxTicksBetweenSpins)
        self.curTicksOfDelay = rnd 

    def SelectProvocation(self):
        # pick a delay
        if(self.enableProvocations == False):
            self.curProvocation = False
        else:
            rnd = random.randrange(0,100)
            if(rnd < self.provocationFrequency):
                self.curProvocation = True
            else:
                self.curProvocation = False

    # 
    # Spin Functions
    # 
    def SelectSidePartColor(self):
        # pick a side
        self.curSide = random.randrange(0,2)
        # pick a part
        self.curPart = random.randrange(0,2)
        # pick a color
        self.curColor = random.randrange(0,4)
        # Calc Part Type 
        self.curPartType = self.curPart*2 + self.curSide

    def SelectDelay(self):
        # pick a delay
        rnd = random.randrange(self.minTicksBetweenSpins,self.maxTicksBetweenSpins)
        self.curTicksOfDelay = rnd 

    def SelectProvocation(self):
        # pick a delay
        if(self.enableProvocations == False):
            self.curProvocation = False
        else:
            rnd = random.randrange(0,100)
            if(rnd < self.provocationFrequency):
                self.curProvocation = True
            else:
                self.curProvocation = False

    #//
    #// Draw Image Functions
    #//
    def DrawPartType(self,inNum):
        
        # Caluculate CurWidth
        if(self.smallParts == True):
            curWidth = self.partTypeWidth[inNum]/2
        else:
            curWidth = self.partTypeWidth[inNum]
        curHeight = self.partTypeHeight[inNum]
        #// Caluculate upper left
        curX = self.CalcLeftForMiddle(curWidth)   
        curY = self.CalcTopForMiddle(curHeight)     

        #var c = spin.canvas.getContext('2d');

        self.canvas.DrawPartCanvas(inNum,curX,curY,curWidth,curHeight)
        #if inNum == 0:
        #    self.canvas.DrawPartCanvas(self.leftHandImage,curX,curY,curWidth,curHeight)
        #elif(inNum == 1):
        #    self.canvas.DrawPartCanvas(self.rightHandImage,curX,curY,curWidth,curHeight)
        #elif(inNum == 2):
        #    self.canvas.DrawPartCanvas(self.leftFootImage,curX,curY,curWidth,curHeight)
        #elif(inNum == 3):
        #    self.canvas.DrawPartCanvas(self.rightFootImage,curX,curY,curWidth,curHeight)
    #//
    #// Say Functions
    #//
    def SayLeft(self):
       if self.soundOn == True:
            # Fixme
            play(self.leftSound)

    def SayRight(self):
       if self.soundOn == True:
            play (self.rightSound)

    def SayHand(self):
       if self.soundOn == True:
            play(self.handSound)
    def SayFoot(self):
       if self.soundOn == True:
            play(self.footSound)
    def SayRed(self):
       if(self.soundOn == True):
            play(self.redSound)
    def SayBlue(self):
       if(self.soundOn == True):
            play(self.blueSound)
    def SayGreen(self):
       if(self.soundOn == True):
            play(self.greenSound)
    def SayYellow(self):
       if(self.soundOn == True):
            play(self.yellowSound)
    def SaySide(self,inSide):
        if(inSide == 0):
            self.SayLeft()
        else: 
            self.SayRight()
    def SayPart(self,inPart):
        if(inPart == 0):
            self.SayHand()
        else:
            self.SayFoot()
    def SayColor(self,inColor):
        if(inColor == 0):
            self.SayRed()
        elif(inColor == 1):
            self.SayBlue()
        elif(inColor == 2):
            self.SayGreen()
        elif(inColor == 3):
            self.SayYellow()
    #//
    #// Provocations
    #//
    def SayAProvocation(self):
        #var rnd;
        if(self.soundOn == True):
            rnd = random.randrange(0,7)
            play(self.provocations[rnd])
    #//
    #// Touch events... All touch events come in here before being passed onward based on type
    #//
    #//def doTouch(e) {
    #// switch (touchType) {
    #//   case "start": touchStart(e); break;
    #//    case "end": touchEnd(e); break;
    #//    case "move": touchMove(e); break;
    #//    case "cancel": touchCancel(e); break;
    #//}
    #//};
    #def touchStart(e) {
    #   // console.log("touchStart");
    #};
    #def touchEnd(e) {
    #   // console.log("touchEnd");
    #    DoBump();
    #};
    #def touchMove(e) {
    #};
    #def touchCancel(e) {
    #};
    #def DoTilt (e) {
    #   SetCanvasSize();
    #   DoBump();
    #};
    #def DoTouch () {
    #   DoBump();
    #};
    def DoBump (self):
        self.ClearCanvas()
        if(self.bShowIntro == True):
            self.bShowIntro = False
        else:
            self.bShowIntro = True
        self.iTick=0 
    def DoIntro (self):
        self.bShowIntro = True
        self.iTick=0
    #// onSuccess Callback
    #//
    #def OnSuccessAudio() {
    #  //console.log("playAudio():Audio Success");
    #};
    #
    #// onError Callback 
    #//
    #def OnErrorAudio(error) {
    #alert('code: '    + error.code    + '\n' + 
    #      'message: ' + error.message + '\n');
    #};

    def DoTick(self):
        #print("Tick", self.iTick)
        if self.mode == Mode.Banner:
            if(self.iTick == 0):
                self.ClearCanvas(); 
                # Touch Screen to Start
                self.DrawTouchScreenToStart()
            #Draw Spinner
            spinnerFrame = self.CalcSpinnerFrame()
            self.DrawSpinnerFrame(spinnerFrame)
            # Draw Some Dots
            rndColor = random.randrange(0,4)
            self.DrawColor(rndColor,4)
            #Advance Time
            self.iTick=self.iTick+1
            if(self.iTick >= (48*20)):
                self.iTick = 0
            if args.verbose: 
                print("Intro Tick")
        else:
            if self.iTick == 0:
                #Clear Canvas
                self.ClearCanvas() 
                # Determine Spin Results
                self.SelectSidePartColor()
                # Determine Post Spin Delay
                self.SelectDelay()
                # Determine Provocation 
                self.SelectProvocation()
                # Say Side 
                #//console.log("SaySideBegin:",this.tickCount);
                self.SaySide(self.curSide)
                #//console.log("SaySideEnd:",this.tickCount);
            elif(self.iTick == 15):
                self.DrawPartType(self.curPartType)
                self.SayPart(self.curPart)
            elif(self.iTick == 40):
                self.SayColor(self.curColor)
                self.DrawColor(self.curColor,self.curPartType)
            elif(self.iTick == 55):
                if(self.curProvocation == True):
                    self.SayAProvocation()
            elif((self.iTick > 40) and ((self.iTick % 2) == 0)):
                #// Draw Another Dot
                self.DrawColor(self.curColor,self.curPartType)
            # Advance Tick
            self.iTick=self.iTick+1
            if(self.curProvocation == True):
                if(self.iTick >= (self.curTicksOfDelay + 110)):
                    self.iTick = 0
            else:
                if(self.iTick >= (self.curTicksOfDelay + 60)):
                    self.iTick = 0
#
# Helper Functions 
#

def playTwister():
    print("Does not make sense to run without GUI")
    exit(1)

#
# mbg Start
#
topPath = "/home/craigwarner/Programming/tv1/twister-spinner"
#topPath = "/snap/twister-spinner/current"
all_images = []

# CLI Parser
parser = argparse.ArgumentParser(description='Twister Spinner')
parser.add_argument("-v", "--verbose", help="Increase output verbosity",action ="store_true") 
parser.add_argument("--nogui", help="No Graphical User Interface",action ="store_true") 
parser.add_argument('-V', '--version', action='version', version="%(prog)s ("+__version__+")")
args = parser.parse_args()

# Gui or Not
if(args.nogui):
    playTwister()
else:
    app = QApplication(sys.argv)
    screen = app.primaryScreen()
    if args.verbose:
        print('Screen: %s' % screen.name())
    size = screen.size()
    if args.verbose:
        print('Size: %d x %d' % (size.width(), size.height()))
    rect = screen.availableGeometry()
    if args.verbose:
        print('Available: %d x %d' % (rect.width(), rect.height()))
    w = MainWindow(topPath,rect.width(),rect.height())
    w.show()
    app.exec()